package sn.zahra.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static sn.zahra.domain.AssertUtils.zonedDataTimeSameInstant;

public class FileEntityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileEntityAllPropertiesEquals(FileEntity expected, FileEntity actual) {
        assertFileEntityAutoGeneratedPropertiesEquals(expected, actual);
        assertFileEntityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileEntityAllUpdatablePropertiesEquals(FileEntity expected, FileEntity actual) {
        assertFileEntityUpdatableFieldsEquals(expected, actual);
        assertFileEntityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileEntityAutoGeneratedPropertiesEquals(FileEntity expected, FileEntity actual) {
        assertThat(actual)
            .as("Verify FileEntity auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileEntityUpdatableFieldsEquals(FileEntity expected, FileEntity actual) {
        assertThat(actual)
            .as("Verify FileEntity relevant properties")
            .satisfies(a -> assertThat(a.getFileName()).as("check fileName").isEqualTo(expected.getFileName()))
            .satisfies(a -> assertThat(a.getOriginalFileName()).as("check originalFileName").isEqualTo(expected.getOriginalFileName()))
            .satisfies(a -> assertThat(a.getContentType()).as("check contentType").isEqualTo(expected.getContentType()))
            .satisfies(a -> assertThat(a.getFileSize()).as("check fileSize").isEqualTo(expected.getFileSize()))
            .satisfies(a -> assertThat(a.getFilePath()).as("check filePath").isEqualTo(expected.getFilePath()))
            .satisfies(a -> assertThat(a.getStorageType()).as("check storageType").isEqualTo(expected.getStorageType()))
            .satisfies(a -> assertThat(a.getFileData()).as("check fileData").isEqualTo(expected.getFileData()))
            .satisfies(a ->
                assertThat(a.getFileDataContentType()).as("check fileData contenty type").isEqualTo(expected.getFileDataContentType())
            )
            .satisfies(a ->
                assertThat(a.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getCreatedAt())
            )
            .satisfies(a ->
                assertThat(a.getUpdatedAt())
                    .as("check updatedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getUpdatedAt())
            )
            .satisfies(a -> assertThat(a.getDeleted()).as("check deleted").isEqualTo(expected.getDeleted()))
            .satisfies(a ->
                assertThat(a.getDeletedAt())
                    .as("check deletedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getDeletedAt())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileEntityUpdatableRelationshipsEquals(FileEntity expected, FileEntity actual) {
        // empty method
    }
}
