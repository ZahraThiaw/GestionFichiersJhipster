package sn.zahra.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static sn.zahra.domain.AssertUtils.zonedDataTimeSameInstant;

public class UserEntityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserEntityAllPropertiesEquals(UserEntity expected, UserEntity actual) {
        assertUserEntityAutoGeneratedPropertiesEquals(expected, actual);
        assertUserEntityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserEntityAllUpdatablePropertiesEquals(UserEntity expected, UserEntity actual) {
        assertUserEntityUpdatableFieldsEquals(expected, actual);
        assertUserEntityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserEntityAutoGeneratedPropertiesEquals(UserEntity expected, UserEntity actual) {
        assertThat(actual)
            .as("Verify UserEntity auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserEntityUpdatableFieldsEquals(UserEntity expected, UserEntity actual) {
        assertThat(actual)
            .as("Verify UserEntity relevant properties")
            .satisfies(a ->
                assertThat(a.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getCreatedAt())
            )
            .satisfies(a ->
                assertThat(a.getUpdatedAt())
                    .as("check updatedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getUpdatedAt())
            )
            .satisfies(a -> assertThat(a.getDeleted()).as("check deleted").isEqualTo(expected.getDeleted()))
            .satisfies(a ->
                assertThat(a.getDeletedAt())
                    .as("check deletedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getDeletedAt())
            )
            .satisfies(a -> assertThat(a.getNom()).as("check nom").isEqualTo(expected.getNom()))
            .satisfies(a -> assertThat(a.getPrenom()).as("check prenom").isEqualTo(expected.getPrenom()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getPassword()).as("check password").isEqualTo(expected.getPassword()))
            .satisfies(a -> assertThat(a.getRole()).as("check role").isEqualTo(expected.getRole()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserEntityUpdatableRelationshipsEquals(UserEntity expected, UserEntity actual) {
        // empty method
    }
}
